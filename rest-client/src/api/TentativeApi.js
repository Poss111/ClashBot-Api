/**
 * clash-bot-webapp-service
 * Clash Bot Webapp Service to support League of Legends Clash tournament scheduling with Discord.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: rixxroid@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import PlacePlayerOnTentativeRequest from '../model/PlacePlayerOnTentativeRequest';
import Tentative from '../model/Tentative';

/**
* Tentative service.
* @module api/TentativeApi
* @version 1.0.0
*/
export default class TentativeApi {

    /**
    * Constructs a new TentativeApi. 
    * @alias module:api/TentativeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * A list of people on the tentative queue for upcoming Tournaments.
     * @param {String} serverName The Server to filter the tentative queue by.
     * @param {Object} opts Optional parameters
     * @param {String} opts.tournamentName The Tournament name to filter by.
     * @param {String} opts.tournamentDay The Tournament day to filter by.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Tentative>} and HTTP response
     */
    getTentativeDetailsWithHttpInfo(serverName, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling getTentativeDetails");
      }

      let pathParams = {
      };
      let queryParams = {
        'serverName': serverName,
        'tournamentName': opts['tournamentName'],
        'tournamentDay': opts['tournamentDay']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Tentative];
      return this.apiClient.callApi(
        '/tentative', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * A list of people on the tentative queue for upcoming Tournaments.
     * @param {String} serverName The Server to filter the tentative queue by.
     * @param {Object} opts Optional parameters
     * @param {String} opts.tournamentName The Tournament name to filter by.
     * @param {String} opts.tournamentDay The Tournament day to filter by.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Tentative>}
     */
    getTentativeDetails(serverName, opts) {
      return this.getTentativeDetailsWithHttpInfo(serverName, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Places a player on the tentative queue for an upcoming Tournament.
     * @param {Object} opts Optional parameters
     * @param {module:model/PlacePlayerOnTentativeRequest} opts.placePlayerOnTentativeRequest Parameters to place a Player into the tentative queue
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Tentative} and HTTP response
     */
    placePlayerOnTentativeWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['placePlayerOnTentativeRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Tentative;
      return this.apiClient.callApi(
        '/tentative', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Places a player on the tentative queue for an upcoming Tournament.
     * @param {Object} opts Optional parameters
     * @param {module:model/PlacePlayerOnTentativeRequest} opts.placePlayerOnTentativeRequest Parameters to place a Player into the tentative queue
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Tentative}
     */
    placePlayerOnTentative(opts) {
      return this.placePlayerOnTentativeWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove a player from the tentative queue for an upcoming Tournament.
     * @param {String} serverName the name of the Server the queue falls under.
     * @param {String} playerId the player id to remove from the tentative queue with.
     * @param {String} tournament the Tournament that the tentative queue belongs to.
     * @param {String} tournamentDay the Tournament day that the tentative queue belongs to.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Tentative} and HTTP response
     */
    removePlayerFromTentativeWithHttpInfo(serverName, playerId, tournament, tournamentDay) {
      let postBody = null;
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling removePlayerFromTentative");
      }
      // verify the required parameter 'playerId' is set
      if (playerId === undefined || playerId === null) {
        throw new Error("Missing the required parameter 'playerId' when calling removePlayerFromTentative");
      }
      // verify the required parameter 'tournament' is set
      if (tournament === undefined || tournament === null) {
        throw new Error("Missing the required parameter 'tournament' when calling removePlayerFromTentative");
      }
      // verify the required parameter 'tournamentDay' is set
      if (tournamentDay === undefined || tournamentDay === null) {
        throw new Error("Missing the required parameter 'tournamentDay' when calling removePlayerFromTentative");
      }

      let pathParams = {
      };
      let queryParams = {
        'serverName': serverName,
        'playerId': playerId,
        'tournament': tournament,
        'tournamentDay': tournamentDay
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Tentative;
      return this.apiClient.callApi(
        '/tentative', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove a player from the tentative queue for an upcoming Tournament.
     * @param {String} serverName the name of the Server the queue falls under.
     * @param {String} playerId the player id to remove from the tentative queue with.
     * @param {String} tournament the Tournament that the tentative queue belongs to.
     * @param {String} tournamentDay the Tournament day that the tentative queue belongs to.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Tentative}
     */
    removePlayerFromTentative(serverName, playerId, tournament, tournamentDay) {
      return this.removePlayerFromTentativeWithHttpInfo(serverName, playerId, tournament, tournamentDay)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
