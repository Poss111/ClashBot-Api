/**
 * clash-bot-webapp-service
 * Clash Bot Webapp Service to support League of Legends Clash tournament scheduling with Discord.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: rixxroid@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Tournament from './Tournament';

/**
 * The PlacePlayerOnTentativeRequest model module.
 * @module model/PlacePlayerOnTentativeRequest
 * @version 1.0.0
 */
class PlacePlayerOnTentativeRequest {
    /**
     * Constructs a new <code>PlacePlayerOnTentativeRequest</code>.
     * @alias module:model/PlacePlayerOnTentativeRequest
     * @param serverName {String} The Server that the tentative queue belongs to.
     * @param tournamentDetails {module:model/Tournament} 
     * @param playerId {String} The Player id to be placed on tentative with.
     */
    constructor(serverName, tournamentDetails, playerId) { 
        
        PlacePlayerOnTentativeRequest.initialize(this, serverName, tournamentDetails, playerId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, serverName, tournamentDetails, playerId) { 
        obj['serverName'] = serverName;
        obj['tournamentDetails'] = tournamentDetails;
        obj['playerId'] = playerId;
    }

    /**
     * Constructs a <code>PlacePlayerOnTentativeRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PlacePlayerOnTentativeRequest} obj Optional instance to populate.
     * @return {module:model/PlacePlayerOnTentativeRequest} The populated <code>PlacePlayerOnTentativeRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PlacePlayerOnTentativeRequest();

            if (data.hasOwnProperty('serverName')) {
                obj['serverName'] = ApiClient.convertToType(data['serverName'], 'String');
            }
            if (data.hasOwnProperty('tournamentDetails')) {
                obj['tournamentDetails'] = Tournament.constructFromObject(data['tournamentDetails']);
            }
            if (data.hasOwnProperty('playerId')) {
                obj['playerId'] = ApiClient.convertToType(data['playerId'], 'String');
            }
        }
        return obj;
    }


}

/**
 * The Server that the tentative queue belongs to.
 * @member {String} serverName
 */
PlacePlayerOnTentativeRequest.prototype['serverName'] = undefined;

/**
 * @member {module:model/Tournament} tournamentDetails
 */
PlacePlayerOnTentativeRequest.prototype['tournamentDetails'] = undefined;

/**
 * The Player id to be placed on tentative with.
 * @member {String} playerId
 */
PlacePlayerOnTentativeRequest.prototype['playerId'] = undefined;






export default PlacePlayerOnTentativeRequest;

